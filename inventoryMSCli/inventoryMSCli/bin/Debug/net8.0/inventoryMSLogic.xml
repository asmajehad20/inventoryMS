<?xml version="1.0"?>
<doc>
    <assembly>
        <name>inventoryMSLogic</name>
    </assembly>
    <members>
        <member name="T:inventoryMSLogic.src.BusinessLogicLayer.AuthenticationManager">
            <summary>
            Provides functionality for user authentication and registration.
            </summary>
        </member>
        <member name="M:inventoryMSLogic.src.BusinessLogicLayer.AuthenticationManager.CheckUserCredentials(System.String,System.String)">
            Checks whether the provided username and password match the stored credentials in the user repository. 
            <param name="UserName">The username of the user attempting to authenticate.</param>
            <param name="Password">The password provided by the user attempting to authenticate.</param>
            <returns>
            True if the provided username and password match the stored credentials; otherwise, false.
            </returns>
        </member>
        <member name="M:inventoryMSLogic.src.BusinessLogicLayer.AuthenticationManager.RegisterUser(System.String,System.String,System.String)">
            <summary>
            Registers a new user with the provided username, password, and role.
            </summary>
            <param name="UserName">The username of the user to register.</param>
            <param name="Password">The password of the user to register.</param>
            <param name="Role">The role of the user to register. Defaults to "user" if not specified.</param>
        </member>
        <member name="M:inventoryMSLogic.src.BusinessLogicLayer.AuthenticationManager.GetUserRole(System.String)">
            <summary>
            Retrieves the role of the user with the provided username.
            </summary>
            <param name="UserName">The username of the user whose role to retrieve.</param>
            <returns>The role of the user with the provided username.</returns>
        </member>
        <member name="M:inventoryMSLogic.src.BusinessLogicLayer.AuthenticationManager.GetPasswordHash(System.String)">
            <summary>
            Generates a hash from the provided password using SHA256 algorithm.
            </summary>
            <param name="Password">The password to hash.</param>
            <returns>The SHA256 hash of the provided password.</returns>
        </member>
        <member name="T:inventoryMSLogic.src.BusinessLogicLayer.InventoryManager">
            <summary>
            Provides methods for managing inventory-related operations.
            </summary>
        </member>
        <member name="M:inventoryMSLogic.src.BusinessLogicLayer.InventoryManager.CheckIfProductExists(System.String)">
            <summary>
            Checks if a product exists in the inventory.
            </summary>
            <param name="keyword">The keyword to identify the product.</param>
            <returns>True if the product exists, otherwise false.</returns>
        </member>
        <member name="M:inventoryMSLogic.src.BusinessLogicLayer.InventoryManager.GetProduct(System.String)">
            <summary>
            Retrieves product details from the database based on the provided keyword, which can be either the product name or barcode.
            </summary>
            <param name="keyword">The keyword to search for, which can be either the product name or barcode.</param>
            <returns>A <see cref="T:inventoryMSLogic.src.DataAccessLayer.Product"/> object containing details of the found product, or null if not found.</returns>
            <exception cref="T:System.Exception">Thrown when the product is not found.</exception>
        </member>
        <member name="M:inventoryMSLogic.src.BusinessLogicLayer.InventoryManager.GetAllProducts">
            <summary>
            Retrieves information of all products from the inventory.
            </summary>
            <returns>An array of Product objects representing all products.</returns>
        </member>
        <member name="M:inventoryMSLogic.src.BusinessLogicLayer.InventoryManager.AddProduct(System.String,System.String,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Adds a new product to the inventory.
            </summary>
            <param name="name">The name of the product.</param>
            <param name="barcode">The barcode of the product.</param>
            <param name="price">The price of the product.</param>
            <param name="quantity">The quantity of the product.</param>
            <param name="status">The status of the product.</param>
            <param name="category">The category of the product.</param>
            <returns>The added product.</returns>
        </member>
        <member name="M:inventoryMSLogic.src.BusinessLogicLayer.InventoryManager.UpdateProduct(System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Updates product information based on the provided parameters.
            If a parameter is null or empty, it retains the existing value.
            </summary>
            <param name="keyword">The keyword to identify the product to be updated.</param>
            <param name="ProductName">The new name of the product.</param>
            <param name="Barcode">The new barcode of the product.</param>
            <param name="Price">The new price of the product.</param>
            <param name="Quantity">The new quantity of the product.</param>
            <param name="Status">The new status of the product.</param>
            <param name="Category">The new category of the product.</param>
        </member>
        <member name="M:inventoryMSLogic.src.BusinessLogicLayer.InventoryManager.DeleteProduct(System.String)">
            <summary>
            Deletes a product from the inventory.
            </summary>
            <param name="keyword">The keyword to identify the product to be deleted.</param>
        </member>
        <member name="M:inventoryMSLogic.src.BusinessLogicLayer.InventoryManager.StatusTracking(System.String)">
            <summary>
            Retrieves status information of a product from the inventory.
            </summary>
            <param name="keyword">The keyword to identify the product.</param>
        </member>
        <member name="M:inventoryMSLogic.src.BusinessLogicLayer.InventoryManager.GetProductStatus(System.String)">
            <summary>
            Retrieves status information of a specific product from the inventory.
            </summary>
            <param name="keyword">The keyword to identify the product.</param>
        </member>
        <member name="M:inventoryMSLogic.src.BusinessLogicLayer.InventoryManager.Search(System.String)">
            <summary>
            Searches for products in the inventory based on a keyword.
            </summary>
            <param name="keyword">The keyword to search for.</param>
            <returns>An array of Product objects matching the search criteria.</returns>
        </member>
        <member name="M:inventoryMSLogic.src.BusinessLogicLayer.InventoryManager.GetCategories">
            <summary>
            Retrieves all categories from the inventory.
            </summary>
            <returns>An array of strings representing all categories.</returns>
        </member>
        <member name="M:inventoryMSLogic.src.BusinessLogicLayer.InventoryManager.GetAllCategories">
            <summary>
            Retrieves all categories from the inventory.
            </summary>
            <returns>A dictionary containing category number and their corresponding names.</returns>
        </member>
        <member name="M:inventoryMSLogic.src.BusinessLogicLayer.InventoryManager.AddCategory(System.String)">
            <summary>
            Adds a new category to the inventory.
            </summary>
            <param name="category">The name of the category to be added.</param>
        </member>
        <member name="M:inventoryMSLogic.src.BusinessLogicLayer.InventoryManager.DeleteCategory(System.String)">
            <summary>
            Deletes a category from the inventory.
            </summary>
            <param name="category">The name of the category to be deleted.</param>
        </member>
        <member name="M:inventoryMSLogic.src.BusinessLogicLayer.InventoryManager.UpdateCategory(System.String,System.String)">
            <summary>
            updates a category from the inventory.
            </summary>
            <param name="category">The name of the category to be updated.</param>
            <param name="NewNmae">The new updated name of the category.</param>
        </member>
        <member name="T:inventoryMSLogic.src.BusinessLogicLayer.UserManager">
            <summary>
            Provides methods for managing user-related operations.
            </summary>
        </member>
        <member name="M:inventoryMSLogic.src.BusinessLogicLayer.UserManager.GetUserInfo(System.String)">
            <summary>
            Retrieves user information based on the provided username.
            </summary>
            <param name="UserName">The username of the user to retrieve information for.</param>
        </member>
        <member name="M:inventoryMSLogic.src.BusinessLogicLayer.UserManager.DeleteUser(System.String,System.String)">
            <summary>
            Deletes a user account if the provided username and password match.
            </summary>
            <param name="UserName">The username of the user account to be deleted.</param>
            <param name="Password">The password of the user account.</param>
        </member>
        <member name="M:inventoryMSLogic.src.BusinessLogicLayer.UserManager.GetAllUsers">
            <summary>
            Retrieves information about all users and prints it to the console.
            </summary>
            <returns>An array of User objects representing all users.</returns>
        </member>
        <member name="M:inventoryMSLogic.src.BusinessLogicLayer.UserManager.GetAllRoles">
            <summary>
            Retrieves all roles from the database.
            </summary>
            <returns>An array of strings representing all roles.</returns>
        </member>
        <member name="M:inventoryMSLogic.src.BusinessLogicLayer.UserManager.AddRole(System.String)">
            /// <summary>
            Adds a new role to the database if it doesn't already exist.
            </summary>
            <param name="roleName">The name of the role to be added.</param>
        </member>
        <member name="M:inventoryMSLogic.src.BusinessLogicLayer.UserManager.DeleteRole(System.String)">
            <summary>
            Deletes a role from the database if it exists.
            </summary>
            <param name="roleName">The name of the role to be deleted.</param>
        </member>
        <member name="T:inventoryMSLogic.src.DataAccessLayer.DatabaseConnection">
            <summary>
            Represents a connection to the PostgreSQL database.
            </summary>
        </member>
        <member name="M:inventoryMSLogic.src.DataAccessLayer.DatabaseConnection.OpenConnection">
            <summary>
            Opens a connection to the database.
            </summary>
        </member>
        <member name="M:inventoryMSLogic.src.DataAccessLayer.DatabaseConnection.CloseConnection">
            <summary>
            Closes the connection to the database.
            </summary>
        </member>
        <member name="T:inventoryMSLogic.src.DataAccessLayer.Product">
            <summary>
            Represents a product in the inventory.
            </summary>
        </member>
        <member name="T:inventoryMSLogic.src.DataAccessLayer.InventoryRepository">
            <summary>
            Handles database operations related to inventory.
            </summary>
        </member>
        <member name="M:inventoryMSLogic.src.DataAccessLayer.InventoryRepository.ProductExists(System.String)">
            <summary>
            Checks whether a product exists in the database based on the provided keyword, which can be either the product name or barcode.
            </summary>
            <param name="Keyword">The keyword to search for, which can be either the product name or barcode.</param>
            <returns>True if the product exists, otherwise false.</returns>
            <exception cref="T:Npgsql.NpgsqlException">Thrown when an error occurs during database interaction.</exception>
        </member>
        <member name="M:inventoryMSLogic.src.DataAccessLayer.InventoryRepository.GetProductID(System.String)">
            <summary>
            Retrieves the product ID from the database based on the provided keyword, which can be either the product name or barcode.
            </summary>
            <param name="Keyword">The keyword to search for, which can be either the product name or barcode.</param>
            <returns>The product ID as a string if found.</returns>
            <exception cref="T:Npgsql.NpgsqlException">Thrown when an error occurs during database interaction.</exception>
        </member>
        <member name="M:inventoryMSLogic.src.DataAccessLayer.InventoryRepository.GetProduct(System.String)">
            <summary>
            Retrieves product details from the database based on the provided keyword, which can be either the product name or barcode.
            </summary>
            <param name="Keyword">The keyword to search for, which can be either the product name or barcode.</param>
            <returns>A <see cref="T:inventoryMSLogic.src.DataAccessLayer.Product"/> object containing details of the found product, or null if not found.</returns>
            <exception cref="T:Npgsql.NpgsqlException">Thrown when an error occurs with Npgsql, the PostgreSQL .NET data provider.</exception>
        </member>
        <member name="M:inventoryMSLogic.src.DataAccessLayer.InventoryRepository.GetAllProducts">
            <summary>
            Retrieves details of all products from the database.
            </summary>
            <returns>An array of <see cref="T:inventoryMSLogic.src.DataAccessLayer.Product"/> objects containing details of all products.</returns>
            <exception cref="T:Npgsql.NpgsqlException">Thrown when an error occurs with Npgsql, the PostgreSQL .NET data provider.</exception>
        </member>
        <member name="M:inventoryMSLogic.src.DataAccessLayer.InventoryRepository.AddProduct(inventoryMSLogic.src.DataAccessLayer.Product)">
            <summary>
            Adds a new product to the database.
            </summary>
            <param name="product">The <see cref="T:inventoryMSLogic.src.DataAccessLayer.Product"/> object containing details of the product to be added.</param>
            <returns>True if the product is successfully added, otherwise false.</returns>
            <exception cref="T:Npgsql.NpgsqlException">Thrown when an error occurs with Npgsql, the PostgreSQL .NET data provider.</exception>
        </member>
        <member name="M:inventoryMSLogic.src.DataAccessLayer.InventoryRepository.UpdateProduct(System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Updates the details of a product in the database.
            </summary>
            <param name="id">The unique identifier of the product to be updated.</param>
            <param name="name">The new name of the product.</param>
            <param name="barcode">The new barcode of the product.</param>
            <param name="price">The new price of the product.</param>
            <param name="quantity">The new quantity of the product.</param>
            <param name="status">The new status of the product.</param>
            <param name="category">The new category name of the product.</param>
            <returns>True if the product is successfully updated, otherwise false.</returns>
            <exception cref="T:Npgsql.NpgsqlException">Thrown when an error occurs during database interaction.</exception>
        </member>
        <member name="M:inventoryMSLogic.src.DataAccessLayer.InventoryRepository.DeleteProduct(System.String)">
            <summary>
            Deletes a product from the database based on the provided keyword, which can be either the product name or barcode.
            </summary>
            <param name="keyword">The keyword to identify the product to be deleted, which can be either the product name or barcode.</param>
            <returns>True if the product is successfully deleted, otherwise false.</returns>
            <exception cref="T:System.Exception">Thrown when an error occurs during database interaction.</exception>
            <exception cref="T:Npgsql.NpgsqlException">Thrown when an error occurs with Npgsql, the PostgreSQL .NET data provider.</exception>
        </member>
        <member name="M:inventoryMSLogic.src.DataAccessLayer.InventoryRepository.ProductStatus(System.String)">
            <summary>
            Retrieves the stock status and quantity of a product based on the provided keyword (barcode or product name).
            </summary>
            <param name="keyword">The barcode or product name to search for.</param>
            <returns>A string containing the status and quantity of the product.</returns>
        </member>
        <member name="M:inventoryMSLogic.src.DataAccessLayer.InventoryRepository.GetProductsByStatus(System.String)">
            <summary>
            Retrieves products with the specified status from the database and returns them as JSON.
            </summary>
            <param name="status">The status of the products to retrieve.</param>
            <returns>A JSON string containing information about products with the specified status.</returns>
        </member>
        <member name="M:inventoryMSLogic.src.DataAccessLayer.InventoryRepository.Search(System.String)">
            <summary>
            Searches for products based on the provided search word and returns matching products as JSON.
            </summary>
            <param name="SearchWord">The search word to look for in product names, barcodes, status, and category names.</param>
            <returns>A JSON string containing information about matching products.</returns>
        </member>
        <member name="M:inventoryMSLogic.src.DataAccessLayer.InventoryRepository.CategoryExists(System.String)">
            <summary>
            Checks if a category exists in the database.
            </summary>
            <param name="name">The name of the category to check.</param>
            <returns>True if the category exists, otherwise false.</returns>
        </member>
        <member name="M:inventoryMSLogic.src.DataAccessLayer.InventoryRepository.GetAllCategories">
            <summary>
            Retrieves all categories from the database and returns them as JSON.
            </summary>
            <returns>A JSON string containing information about all categories.</returns>
        </member>
        <member name="M:inventoryMSLogic.src.DataAccessLayer.InventoryRepository.AddCategory(System.String)">
            <summary>
            Adds a new category to the database.
            </summary>
            <param name="name">The name of the category to be added.</param>
        </member>
        <member name="M:inventoryMSLogic.src.DataAccessLayer.InventoryRepository.DeleteCategory(System.String)">
            <summary>
            Deletes a category from the database.
            </summary>
            <param name="name">The name of the category to be deleted.</param>
        </member>
        <member name="M:inventoryMSLogic.src.DataAccessLayer.InventoryRepository.GetCategoryID(System.String)">
            <summary>
            Retrieves the category ID from the database based on the provided category name.
            </summary>
            <param name="Keyword">The category name to search for.</param>
            <returns>The category ID as a string if found.</returns>
            <exception cref="T:System.Exception">Thrown when the category ID is not found in the database.</exception>
            <exception cref="T:Npgsql.NpgsqlException">Thrown when an error occurs during database interaction.</exception>
        </member>
        <member name="M:inventoryMSLogic.src.DataAccessLayer.InventoryRepository.UpdateCategory(System.String,System.String)">
            <summary>
            Updates the name of a category in the database.
            </summary>
            <param name="id">The unique identifier of the category to be updated.</param>
            <param name="name">The new name of the category.</param>
            <returns>True if the category is successfully updated, otherwise false.</returns>
            <exception cref="T:Npgsql.NpgsqlException">Thrown when an error occurs during database interaction.</exception>
        </member>
        <member name="T:inventoryMSLogic.src.DataAccessLayer.User">
            <summary>
            Represents a user in the system.
            </summary>
        </member>
        <member name="T:inventoryMSLogic.src.DataAccessLayer.UserRepository">
            <summary>
            Handles database operations related to users.
            </summary>
        </member>
        <member name="M:inventoryMSLogic.src.DataAccessLayer.UserRepository.GetStoredUserRole(System.String)">
            <summary>
            Retrieves the stored role of the user from the database.
            </summary>
            <param name="UserName">The username of the user.</param>
            <returns>The role of the user.</returns>
        </member>
        <member name="M:inventoryMSLogic.src.DataAccessLayer.UserRepository.GetStoredPasswordHash(System.String)">
            <summary>
            Retrieves the stored password hash of the user from the database.
            </summary>
            <param name="UserName">The username of the user.</param>
            <returns>The password hash of the user.</returns>
        </member>
        <member name="M:inventoryMSLogic.src.DataAccessLayer.UserRepository.CreateUser(System.String,System.String,System.String)">
            <summary>
            Creates a new user in the database.
            </summary>
            <param name="UserName">The username of the user to be created.</param>
            <param name="Password">The password of the user to be created.</param>
            <param name="Role">The role of the user to be created.</param>
        </member>
        <member name="M:inventoryMSLogic.src.DataAccessLayer.UserRepository.DeleteUser(System.String)">
            <summary>
            Deletes a user from the database.
            </summary>
            <param name="UserName">The username of the user to be deleted.</param>
        </member>
        <member name="M:inventoryMSLogic.src.DataAccessLayer.UserRepository.GetAllUsers">
            <summary>
            Retrieves all users from the database and returns them as JSON.
            </summary>
            <returns>A JSON string containing information about all users.</returns>
        </member>
        <member name="M:inventoryMSLogic.src.DataAccessLayer.UserRepository.GetAllRoles">
            <summary>
            Retrieves all roles from the database and returns them as JSON.
            </summary>
            <returns>A JSON string containing information about all roles.</returns>
        </member>
        <member name="M:inventoryMSLogic.src.DataAccessLayer.UserRepository.AddRoles(System.String)">
            <summary>
            Adds a new role to the database.
            </summary>
            <param name="rolename">The name of the role to be added.</param>
        </member>
        <member name="M:inventoryMSLogic.src.DataAccessLayer.UserRepository.RoleExists(System.String)">
            <summary>
            Checks if a role exists in the database.
            </summary>
            <param name="rolename">The name of the role to check.</param>
            <returns>True if the role exists, otherwise false.</returns>
        </member>
        <member name="M:inventoryMSLogic.src.DataAccessLayer.UserRepository.DeleteRole(System.String)">
            <summary>
            Deletes a role from the database.
            </summary>
            <param name="rolename">The name of the role to be deleted.</param>
        </member>
    </members>
</doc>
